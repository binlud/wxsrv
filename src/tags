!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AES_CBCDecrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCDecrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCDecrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCDecrypt( const std::string & objSource,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCEncrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCEncrypt( const char * sSource, const uint32_t iSize,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
AES_CBCEncrypt	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::AES_CBCEncrypt( const std::string & objSource,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
ANALYS_LOG	log.hpp	116;"	d
CHKERR_LOG	log.hpp	101;"	d
CHKRUN_LOG	log.hpp	104;"	d
CLIREQ_LOG	log.hpp	107;"	d
CLIRES_LOG	log.hpp	110;"	d
CPPFLAGS	Makefile	/^CPPFLAGS = -g -W -Wall$/;"	m
CURRENT_ACTIONID	log.hpp	/^    CURRENT_ACTIONID,             \/\/ 当前柜台业务调用动作 ID$/;"	e	enum:tagLogArgType
CURRENT_ACTIONTBID	log.hpp	/^    CURRENT_ACTIONTBID,           \/\/ 当前柜台业务调用动作 ID 的柜台 ID$/;"	e	enum:tagLogArgType
CURRENT_FUNCID	log.hpp	/^    CURRENT_FUNCID,               \/\/ 当前柜台业务调用动作 ID 的柜台功能号$/;"	e	enum:tagLogArgType
CommonLogArg	log.hpp	/^    CommonLogArg()$/;"	f	class:CommonLogArg
CommonLogArg	log.hpp	/^class CommonLogArg$/;"	c
ComputeSignature	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::ComputeSignature(const std::string sToken, const std::string sTimeStamp, const std::string & sNonce,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
DBG_LOG	log.hpp	123;"	d
DEBUG	log.hpp	/^    DEBUG,$/;"	e	enum:tagLogType
DELETE_PTR	WXBizMsgCrypt.cpp	24;"	d	file:
DecodeBase64	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::DecodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
DecryptMsg	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::DecryptMsg(const std::string &sMsgSignature,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
ERROR	log.hpp	/^    ERROR = 1,$/;"	e	enum:tagLogType
ERR_LOG	log.hpp	119;"	d
EncodeBase64	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::EncodeBase64(const std::string sSrc, std::string & sTarget)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
EncryptAndDecrypt	WXBizMsgCrypt.cpp	/^namespace EncryptAndDecrypt$/;"	n	file:
EncryptAndDecrypt	WXBizMsgCrypt.h	/^namespace EncryptAndDecrypt$/;"	n
EncryptMsg	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::EncryptMsg(const std::string &sReplyMsg,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
FREE_PTR	WXBizMsgCrypt.cpp	18;"	d	file:
GCC	Makefile	/^GCC=g++$/;"	m
GenAesKeyFromEncodingKey	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GenAesKeyFromEncodingKey( const std::string & sEncodingKey, std::string & sAesKey)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenNeedEncryptData	WXBizMsgCrypt.cpp	/^void WXBizMsgCrypt::GenNeedEncryptData(const std::string &sReplyMsg,std::string & sNeedEncrypt )$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenRandStr	WXBizMsgCrypt.cpp	/^void WXBizMsgCrypt::GenRandStr(std::string & sRandStr, uint32_t len)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GenReturnXml	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GenReturnXml(const std::string & sEncryptMsg, const std::string & sSignature, const std::string & sTimeStamp,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
GetXmlField	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::GetXmlField(const std::string & sPostData, const std::string & sField, std::string &sEncryptMsg)$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
HTTP_REQENV	log.hpp	/^    HTTP_REQENV,                  \/\/ HTTP 请求环境参数$/;"	e	enum:tagLogArgType
INCLUDEDIR	Makefile	/^INCLUDEDIR= -I..\/lib\/include64\/ -I..\/..\/3rd-srv\/include\/$/;"	m
INFO	log.hpp	/^    INFO,$/;"	e	enum:tagLogType
LIBDIR	Makefile	/^LIBDIR= -L..\/lib\/lib64\/ -l crypto -l tinyxml2 -lfcgi$/;"	m
LOG_ARG	log.hpp	/^} LOG_ARG;$/;"	t	typeref:struct:tagLogArg
LOG_ARG_TYPE	log.hpp	/^} LOG_ARG_TYPE;$/;"	t	typeref:enum:tagLogArgType
LOG_ARG_TYPE_COUNT	log.hpp	/^    LOG_ARG_TYPE_COUNT,           \/\/ 类型总数$/;"	e	enum:tagLogArgType
LOG_MODULE	log.hpp	87;"	d
LOG_TYPE	log.hpp	/^} LOG_TYPE;$/;"	t	typeref:enum:tagLogType
OBJS	Makefile	/^OBJS=$(patsubst %.cpp,%.o,$(SOURCES) )$/;"	m
RECVERR_LOG	log.hpp	113;"	d
REQUEST_URI	log.hpp	/^    REQUEST_URI,                  \/\/ 业务请求功能路径$/;"	e	enum:tagLogArgType
REQ_STAR_TTIME	log.hpp	/^    REQ_STAR_TTIME,               \/\/ 接收到 HTTP 请求时的时间，微妙数$/;"	e	enum:tagLogArgType
RUN_LOG	log.hpp	131;"	d
SESSIONID	log.hpp	/^    SESSIONID = 1,                \/\/ CONTEXT 的内存地址，每个业务请求唯一，作为 SESSION$/;"	e	enum:tagLogArgType
SOURCES	Makefile	/^SOURCES = $(wildcard *.cpp)$/;"	m
SPACE_STRING	log.cpp	288;"	d	file:
SYSDBG_LOG	log.hpp	95;"	d
SYSERR_LOG	log.hpp	90;"	d
SYSTEST_LOG	log.hpp	98;"	d
SetOneFieldToXml	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::SetOneFieldToXml(tinyxml2::XMLDocument * pDoc, tinyxml2::XMLNode* pXmlNode, const char * pcFieldName,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
TEST	log.hpp	/^    TEST,$/;"	e	enum:tagLogType
TEST_LOG	log.hpp	127;"	d
USER_UNIQID	log.hpp	/^    USER_UNIQID,                  \/\/ 用户唯一 ID，即 客户标识类型+客户标识$/;"	e	enum:tagLogArgType
ValidateSignature	WXBizMsgCrypt.cpp	/^int WXBizMsgCrypt::ValidateSignature(const std::string &sMsgSignature, const std::string &sTimeStamp,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
WXBizMsgCrypt	WXBizMsgCrypt.h	/^    WXBizMsgCrypt(const std::string &sToken,$/;"	f	class:EncryptAndDecrypt::WXBizMsgCrypt
WXBizMsgCrypt	WXBizMsgCrypt.h	/^class WXBizMsgCrypt$/;"	c	namespace:EncryptAndDecrypt
WXBizMsgCryptErrorCode	WXBizMsgCrypt.h	/^enum  WXBizMsgCryptErrorCode {$/;"	g	namespace:EncryptAndDecrypt
WXBizMsgCrypt_ComputeSignature_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ComputeSignature_Error = -40003,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_DecodeBase64_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_DecodeBase64_Error = -40010,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_DecryptAES_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_DecryptAES_Error = -40007,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_EncodeBase64_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_EncodeBase64_Error = -40009,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_EncryptAES_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_EncryptAES_Error = -40006,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_GenReturnXml_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_GenReturnXml_Error = -40011,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_IllegalAesKey	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_IllegalAesKey = -40004,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_IllegalBuffer	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_IllegalBuffer = -40008,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_OK	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_OK = 0,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ParseXml_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ParseXml_Error = -40002,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ValidateAppid_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ValidateAppid_Error = -40005,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
WXBizMsgCrypt_ValidateSignature_Error	WXBizMsgCrypt.h	/^    WXBizMsgCrypt_ValidateSignature_Error = -40001,$/;"	e	enum:EncryptAndDecrypt::WXBizMsgCryptErrorCode
_UTILS_H_	utils.hpp	2;"	d
__KDS_MOBILE_STOCK_TRADE_SERVICE_LOG_H__	log.hpp	2;"	d
accept	main.cpp	/^bool accept(unsigned int &req_count)$/;"	f
currentActionId	log.hpp	/^    string currentActionId;       \/\/ 当前柜台业务调用动作 ID$/;"	m	struct:tagLogArg
currentActionTbId	log.hpp	/^    string currentActionTbId;     \/\/ 当前柜台业务调用动作 ID 的柜台 ID$/;"	m	struct:tagLogArg
currentFuncId	log.hpp	/^    string currentFuncId;         \/\/ 当前柜台业务调用动作 ID 的柜台功能号$/;"	m	struct:tagLogArg
gLogFp	log.cpp	/^static FILE *gLogFp = NULL;$/;"	v	file:
gLogLevel	log.cpp	/^static LOG_TYPE gLogLevel = INFO;$/;"	v	file:
g_logArgs	log.cpp	/^CommonLogArg g_logArgs;$/;"	v
g_pLogArgs	log.cpp	/^static CommonLogArg *g_pLogArgs = &g_logArgs;$/;"	v	file:
getAllCommonLogMsg	log.cpp	/^string CommonLogArg::getAllCommonLogMsg()$/;"	f	class:CommonLogArg
getAllCommonLogMsg	log.cpp	/^string getAllCommonLogMsg()$/;"	f
getCommonLogMsg	log.cpp	/^string CommonLogArg::getCommonLogMsg()$/;"	f	class:CommonLogArg
getCommonLogMsg	log.cpp	/^string getCommonLogMsg()$/;"	f
gettid	log.cpp	/^pid_t gettid()$/;"	f
httpReqEnv	log.hpp	/^    string httpReqEnv;            \/\/ http 请求环境参数$/;"	m	struct:tagLogArg
initCommonLogMsg	log.cpp	/^void initCommonLogMsg()$/;"	f
initLog	log.cpp	/^bool initLog( string logPath, string logLevel )$/;"	f
jxGetData	utils.cpp	/^bool jxGetData(const string &src, map<string, string> &res )$/;"	f
kAesIVSize	WXBizMsgCrypt.h	/^static const unsigned int kAesIVSize = 16;$/;"	m	namespace:EncryptAndDecrypt
kAesKeySize	WXBizMsgCrypt.h	/^static const unsigned int kAesKeySize = 32;$/;"	m	namespace:EncryptAndDecrypt
kEncodingKeySize	WXBizMsgCrypt.h	/^static const unsigned int kEncodingKeySize = 43;$/;"	m	namespace:EncryptAndDecrypt
kMaxBase64Size	WXBizMsgCrypt.h	/^static const unsigned int kMaxBase64Size = 1000000000;$/;"	m	namespace:EncryptAndDecrypt
kMsgLen	WXBizMsgCrypt.h	/^static const unsigned int kMsgLen = 4;$/;"	m	namespace:EncryptAndDecrypt
kRandEncryptStrLen	WXBizMsgCrypt.h	/^static const unsigned int kRandEncryptStrLen = 16;$/;"	m	namespace:EncryptAndDecrypt
logArg	log.hpp	/^    LOG_ARG logArg;$/;"	m	class:CommonLogArg
logMsg	log.cpp	/^void logMsg( LOG_TYPE type, const char *fmt, ... )$/;"	f
m_sAppid	WXBizMsgCrypt.h	/^    std::string m_sAppid;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
m_sEncodingAESKey	WXBizMsgCrypt.h	/^    std::string m_sEncodingAESKey;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
m_sToken	WXBizMsgCrypt.h	/^    std::string m_sToken;$/;"	m	class:EncryptAndDecrypt::WXBizMsgCrypt
main	main.cpp	/^int main()$/;"	f
reqStartTime	log.hpp	/^    long   reqStartTime;          \/\/ 接收到 http 请求时的时间，微妙数$/;"	m	struct:tagLogArg
requestUri	log.hpp	/^    string requestUri;            \/\/ 业务请求功能路径$/;"	m	struct:tagLogArg
sessionid	log.hpp	/^    string sessionid;             \/\/ context 的内存地址，每个业务请求唯一，作为 session$/;"	m	struct:tagLogArg
setCommonLogArg	log.cpp	/^void CommonLogArg::setCommonLogArg( CommonLogArg com )$/;"	f	class:CommonLogArg
setCommonLogArg	log.cpp	/^void CommonLogArg::setCommonLogArg( LOG_ARG args )$/;"	f	class:CommonLogArg
setCommonLogArg	log.cpp	/^void CommonLogArg::setCommonLogArg( LOG_ARG_TYPE type, LOG_ARG args )$/;"	f	class:CommonLogArg
setCommonLogArg	log.cpp	/^void CommonLogArg::setCommonLogArg( LOG_ARG_TYPE type, string value )$/;"	f	class:CommonLogArg
setCommonLogArg	log.cpp	/^void setCommonLogArg( CommonLogArg com )$/;"	f
setCommonLogArg	log.cpp	/^void setCommonLogArg( LOG_ARG args )$/;"	f
setCommonLogArg	log.cpp	/^void setCommonLogArg( LOG_ARG_TYPE type, LOG_ARG args )$/;"	f
setCommonLogArg	log.cpp	/^void setCommonLogArg( LOG_ARG_TYPE type, string value )$/;"	f
strIcmp	log.cpp	/^int strIcmp(const char* p1, const char* p2)$/;"	f
tagLogArg	log.hpp	/^typedef struct tagLogArg {$/;"	s
tagLogArgType	log.hpp	/^typedef enum tagLogArgType {$/;"	g
tagLogType	log.hpp	/^typedef enum tagLogType {$/;"	g
userUniqId	log.hpp	/^    string userUniqId;            \/\/ 用户唯一 ID，即 客户标识类型+客户标识$/;"	m	struct:tagLogArg
